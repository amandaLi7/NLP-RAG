Question,Answer,Notes
What is the author ID of Yiming Yang?,46286308,##Title: Learning Performance-Improving Code Edits
What is the H-index of Yiming Yang?,17,##Title: Learning Performance-Improving Code Edits
What is the semantic scholar author name of Yiming Yang?,Yiming Yang,##Title: Learning Performance-Improving Code Edits
What is the semantic scholar author name of Yiming Yang?,https://www.semanticscholar.org/author/46286308,##Title: Learning Performance-Improving Code Edits
What is the affiliation of Yiming Yang?,"LTI (CMU), No other affiliations",##Title: Learning Performance-Improving Code Edits
What is the paper ID of the paper Learning Performance-Improving Code Edits?,1786a2f9140ed7211b21302977de64e948b92308,##Title: Learning Performance-Improving Code Edits
What are the external IDs of the paper Learning Performance-Improving Code Edits?,"{'ArXiv': '2302.07867', 'DBLP': 'journals/corr/abs-2302-07867', 'DOI': '10.48550/arXiv.2302.07867', 'CorpusId': 256868633}",##Title: Learning Performance-Improving Code Edits
What is the URL of the paper Learning Performance-Improving Code Edits?,https://www.semanticscholar.org/paper/1786a2f9140ed7211b21302977de64e948b92308,##Title: Learning Performance-Improving Code Edits
What is the abstract of the paper 'Learning Performance-Improving Code Edits'?,"The waning of Moore's Law has shifted the focus of the tech industry towards alternative methods for continued performance gains. While optimizing compilers are a standard tool to help increase program efficiency, programmers continue to shoulder much responsibility in crafting and refactoring code with better performance characteristics. In this paper, we investigate the ability of large language models (LLMs) to suggest functionally correct, performance improving code edits. We hypothesize that language models can suggest such edits in ways that would be impractical for static analysis alone. We investigate these questions by curating a large-scale dataset of Performance-Improving Edits, PIE. PIE contains trajectories of programs, where a programmer begins with an initial, slower version and iteratively makes changes to improve the program's performance. We use PIE to evaluate and improve the capacity of large language models. Specifically, use examples from PIE to fine-tune multiple variants of CODEGEN, a billion-scale Transformer-decoder model. Additionally, we use examples from PIE to prompt OpenAI's CODEX using a few-shot prompting. By leveraging PIE, we find that both CODEX and CODEGEN can generate performance-improving edits, with speedups of more than 2.5x for over 25% of the programs, for C++ and Python, even after the C++ programs were compiled using the O3 optimization level. Crucially, we show that PIE allows CODEGEN, an open-sourced and 10x smaller model than CODEX, to match the performance of CODEX on this challenging task. Overall, this work opens new doors for creating systems and methods that can help programmers write efficient code.",##Title: Learning Performance-Improving Code Edits
In which venue was the paper 'Learning Performance-Improving Code Edits' published?,arXiv.org,##Title: Learning Performance-Improving Code Edits
In what year was the paper 'Learning Performance-Improving Code Edits' published?,2023,##Title: Learning Performance-Improving Code Edits
How many references are in the paper 'Learning Performance-Improving Code Edits'?,87,##Title: Learning Performance-Improving Code Edits
How many citations does the paper 'Learning Performance-Improving Code Edits' have?,26,##Title: Learning Performance-Improving Code Edits
What is the citation count of 'Learning Performance-Improving Code Edits' have?,26,##Title: Learning Performance-Improving Code Edits
How many influential citations does the paper 'Learning Performance-Improving Code Edits' have?,3,##Title: Learning Performance-Improving Code Edits
Is the paper 'Learning Performance-Improving Code Edits' open access?,Yes,##Title: Learning Performance-Improving Code Edits
What is the open access PDF URL of the paper titled 'Learning Performance-Improving Code Edits'?,http://arxiv.org/pdf/2302.07867,##Title: Learning Performance-Improving Code Edits
What are the fields of study for the paper 'Learning Performance-Improving Code Edits'?,Computer Science,##Title: Learning Performance-Improving Code Edits
What is the journal name for the paper 'Learning Performance-Improving Code Edits'?,"ArXiv, volume: abs/2302.07867; ArXiv",##Title: Learning Performance-Improving Code Edits
Who are the authors of the paper 'Learning Performance-Improving Code Edits'?,"Aman Madaan, Alex Shypula, Uri Alon, Milad Hashemi, Parthasarathy Ranganathan, Yiming Yang, Graham Neubig, A. Yazdanbakhsh",##Title: Learning Performance-Improving Code Edits
Who is the first author of the paper 'Learning Performance-Improving Code Edits'?,Aman Madaan,##Title: Learning Performance-Improving Code Edits
What is the TLDR summary of the paper 'Learning Performance-Improving Code Edits'?,"This paper investigates the ability of large language models (LLMs) to suggest functionally correct, performance improving code edits, and hypothesizes that language models can suggest such edits in ways that would be impractical for static analysis alone.",##Title: Learning Performance-Improving Code Edits
